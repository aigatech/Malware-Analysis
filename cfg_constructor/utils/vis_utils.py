import networkx as nx
import matplotlib.pyplot as plt
from pyvis.network import Network
import pandas as pd
import os

def vis(cfg, infile, vis_mode):
    f_id = os.path.basename(infile)
    
    if vis_mode == 0:
        visualize_cfg(cfg, f"CFG for {infile}")
    elif vis_mode == 1:
        visualize_cfg_with_visnetwork(cfg, f"{f_id}-")
    elif vis_mode == 2:
        save_cfg(cfg, f"{f_id}")
    else:
        raise ValueError(f"Invalid Visualization Mode {vis_mode}")


def visualize_cfg(cfg, title):
    pos = nx.spring_layout(cfg)
    nx.draw(cfg, pos, with_labels=True, node_color='lightblue', node_size=500, font_size=8, arrows=True)
    nx.draw_networkx_labels(cfg, pos, {node: f"{node:x}" for node in cfg.nodes()})
    plt.title(title)
    plt.axis('off')
    plt.show()

def visualize_cfg_with_visnetwork(cfg, title):
    # Check if the graph is empty
    if len(cfg.nodes) == 0:
        print("The graph is empty!")
        return
    
    # Create a Network object from pyvis
    net = Network(height='800px', width='100%', bgcolor='#222222', font_color='white')
    
    # Convert NetworkX graph to a format pyvis can use
    for node in cfg.nodes():
        net.add_node(node, label=f"{node:x}", title=f"Node {node}")
    
    for edge in cfg.edges():
        net.add_edge(edge[0], edge[1], title=f"Edge from {edge[0]} to {edge[1]}")
    
    # Customize the network
    net.barnes_hut()
    net.show_buttons(filter_=['physics'])
    
    # Display the network in a browser view
    output_dir = os.path.join('out', 'out_html')
    output_dir = os.path.join('cfg_constructor', output_dir)
    os.makedirs(output_dir, exist_ok=True)
    net.save_graph(os.path.join(output_dir, f'{title}.html'))

def save_cfg(cfg, title):
    """
    Save the control flow graph (CFG) to an Edgelist file and node names to a separate file.
    
    Parameters:
    - cfg: NetworkX graph object representing the control flow graph
    - title: String representing the title of the files (without extension)
    """
    # Check if the graph is empty
    if len(cfg.nodes) == 0:
        print("The graph is empty!")
        return
    
    # Define directory for saving files
    output_dir = os.path.join('out', 'out_edgelists')
    output_dir = os.path.join('cfg_constructor', output_dir)
    os.makedirs(output_dir, exist_ok=True)
    
    # Define file paths
    edgelist_path = os.path.join(output_dir, f'{title}.txt')
    node_names_path = os.path.join(output_dir, f'{title}_node_names.csv')
    
    # Save Edgelist
    nx.write_edgelist(cfg, edgelist_path)
    
    # Save Node Names
    node_names = {node: f"Node_{node}" for node in cfg.nodes}
    node_names_df = pd.DataFrame(list(node_names.items()), columns=['Node', 'Name'])
    node_names_df.to_csv(node_names_path, index=False)
