# all hail William Hamilton for the Torch implementation 
# https://github.com/williamleif/graphsage-simple 

import torch.nn as nn


import torch
import torch.nn as nn
from torch.nn import init
from torch.autograd import Variable

import numpy as np
import time
import random
from sklearn.metrics import f1_score
from collections import defaultdict

from utils.encoders import Encoder
from utils.aggregators import MeanAggregator

class GraphSAGE(nn.Module):

    def __init__(self, num_classes, enc):
        super(GraphSAGE, self).__init__()
        self.enc = enc
        self.bxent = nn.BinaryCrossEntropyLoss()

        self.weight = nn.Parameter(torch.FloatTensor(num_classes, enc.embed_dim))
        init.xavier_uniform(self.weight)

    def forward(self, nodes):
        embeds = self.enc(nodes)
        scores = self.weight.mm(embeds)
        return scores.t()

    def loss(self, nodes, labels):
        scores = self.forward(nodes)
        return self.bxent(scores, labels.squeeze())

