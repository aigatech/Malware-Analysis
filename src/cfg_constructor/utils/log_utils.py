import logging
import os
import json
import time

def setup_logging(job_id):
    """
    Set up logging for the visualization process with JSON output.

    Parameters:
    job_id (str): The unique identifier for the job.

    Returns:
    str: The path to the log file created.
    """
    log_dir = 'src/cfg_constructor/logs'
    os.makedirs(log_dir, exist_ok=True)
    log_file = os.path.join(log_dir, f'visualization_log_{job_id}.json')

    # Create a custom JSON formatter
    class JsonFormatter(logging.Formatter):
        def format(self, record):
            log_obj = {
                'filename': record.filename,
                'exename': record.exename,
                'vismode': record.vismode,
                'time': record.time
            }
            return json.dumps(log_obj)

    # Set up logging
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    # Create a file handler
    file_handler = logging.FileHandler(log_file)
    file_handler.setFormatter(JsonFormatter())
    logger.addHandler(file_handler)

    return log_file

def log_visualization(log_file, fname, vis_mode, duration):
    """
    Log the visualization details.

    Parameters:
    log_file (str): The path to the log file.
    fname (str): The name of the file being visualized.
    vis_mode (int): The mode of visualization used.
    duration (float): The time taken to generate the CFG.
    """
    
    logging.info('', extra={'exename': fname, 'vismode': vis_mode, 'time': duration})

def is_already_visualized(log_file, fname):
    """
    Check if a file has already been visualized by searching the log.

    Parameters:
    log_file (str): The path to the log file.
    fname (str): The name of the file to check.

    Returns:
    bool: True if the file has been visualized, False otherwise.
    """
    with open(log_file, 'r') as f:
        log_data = f.readlines()
        for line in log_data:
            obj = json.loads(line)
            if fname == obj['exename']:
                return True
            
    return False