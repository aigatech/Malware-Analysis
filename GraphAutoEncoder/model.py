# https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.GCNConv.html#torch_geometric.nn.conv.GCNConv
# https://github.com/AntonioLonga/PytorchGeometricTutorial/blob/main/Tutorial6/Tutorial6.ipynb
# https://pytorch-geometric.readthedocs.io/en/latest/generated/torch_geometric.nn.conv.GCNConv.html
# https://github.com/AntonioLonga/PytorchGeometricTutorial/blob/main/Tutorial6/Tutorial6.ipynb


import torch
from torch_geometric.nn import GCNConv
from dataclasses import dataclass

@dataclass
class ModelArgs:
    in_channels: int
    out_channels: int
    hidden_scaling_factor: float

class Encoder(torch.nn.Module):
    def __init__(self, args: ModelArgs) -> None:
        super().__init__()
        self.args = args
        self.conv1 = GCNConv(args.in_channels, int(args.out_channels * args.hidden_scaling_factor))
        self.conv2 = GCNConv(int(args.out_channels * args.hidden_scaling_factor), args.out_channels)
    
    def forward(x: torch.Tensor, edge_idx: torch.Tensor) -> torch.Tensor:
        x = self.conv1(x, edge_idx)
        x = x.relu()
        x = self.conv2(x, edge_idx)
        return x


class Classifier(torch.nn.Module):
    def __init__(self, in_features: int, hidden_dim: int, num_classes: int) -> None:
        super().__init__()
        self.fc1 = torch.nn.Linear(in_features, hidden_dim)
        self.relu = torch.nn.ReLU()
        self.fc2 = torch.nn.Linear(hidden_dim, num_classes)
    
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        x = self.fc1(x)
        x = self.relu(x)
        x = self.fc2(x)
        return x

